<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daniel.feldroy.com/</id>
    <title>Daniel Roy Greenfeld</title>
    <updated>2021-10-11T01:52:22.165Z</updated>
    <generator>Next.js using Feed for Node.js</generator>
    <author>
        <name>Daniel Roy Greenfeld</name>
        <email>daniel@feldroy.com</email>
        <uri>https://daniel.feldroy.com</uri>
    </author>
    <link rel="alternate" href="https://daniel.feldroy.com"/>
    <subtitle>Inside the head of Daniel Roy Greenfeld</subtitle>
    <logo>https://daniel.feldroy.com/images/pydanny-cartwheel.png</logo>
    <icon>https://daniel.feldroy.com/favicon.ico</icon>
    <rights>All rights reserved 2021, Daniel Roy Greenfeld</rights>
    <entry>
        <title type="html"><![CDATA[Exploring the Bunch Class]]></title>
        <id>https://daniel.feldroy.com/posts/exploring-the-bunch-class</id>
        <link href="https://daniel.feldroy.com/posts/exploring-the-bunch-class"/>
        <updated>2021-10-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Bunch classes are very powerful, and with great power comes great responsibility]]></summary>
        <content type="html"><![CDATA[<blockquote>
<h2>Warning</h2>
<p>Be careful with how you use bunch classes. If used in in real projects it is possible to use some of these techniques to overwrite critical methods and attributes. Please don't use these in anything important or you may regret it.</p>
</blockquote>
<p>Every play with a bunch class? I started using them early in my Python career, although it took four years to find out what they were called and better ways to code them.</p>
<p>Over time I became wary of them. In large and/or sophisticated projects you want predictable code, which explains the addition of the typing controls in Python. This goes against that direction, using the mutability of Python to expedite adding functionality while introducing potential instability.</p>
<h2>Simple Unprotected Bunch Class</h2>
<pre><code class="language-python">class Bunch:
    """
    Simple unprotected Python bunch class
    """

    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

bunch = Bunch(name='Exploring the bunch class')
print(bunch.name)
</code></pre>
<p>Those who don't know about the <code>Dict.update()</code> method use this technique:</p>
<pre><code class="language-python">class VerboseBunch:
    """
    Simple, verbose unprotected Python bunch class
    """

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            self.__dict__[k] = v
</code></pre>
<p>We aren't limited to <code>__init__</code> methods, I've used a similar technique on  <code>update</code> and <code>save</code> functions:</p>
<pre><code class="language-python">class Student:
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)
        self.grade_history = []
        self.current_grade = None

    def update(self, **kwargs):
        """Bunch style update!"""
        self.__dict__.update(kwargs)

    def grade(self):
        # Determines grade of student
        r = httpx.get(GRADING_SERVICE_URL)
        self.update(current_grade=r.json()['grade'])        
        self.grade_history.append(self.current_grade)

student = Student(name='Daniel', age=8)
studentgrad
</code></pre>
<p>Awesome, right?</p>
<p>Wrong, it's not awesome. In fact, there's a problem.</p>
<h2>The Problem with Bunch Classes</h2>
<p>Yes, bunch classes and generic update methods are fun, easy-to-understand, and take advantage of Python's mutability. Unfortunately the mutability that powers Bunch classes can cause havoc. Here's an example of a Bunch class failure:</p>
<pre><code class="language-python">student = Student(name='Daniel', age=8)
# Overriding the grade() method by accident
student.update(grade='A')
</code></pre>
<p>By updating the student's <code>grade</code>, we have overwritten the <code>grade()</code> method.</p>
<h2>Simple protected Python bunch class</h2>
<p>You can make protected Bunch classes, that in theory don't let pesky developers overwrite attributes, methods, and properties by accident during object instantiation.</p>
<pre><code class="language-python">class ProtectedBunch:
    """ 
    Use this when you don't want to overwrite
        existing methods and data
    """

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            if not hasattr(self, k):
                setattr(self, k, v)

bunch = ProtectedBunch(__str__=5)
print(bunch)
</code></pre>
<p>Note that this only protects the <code>__init__</code> method. It doesn't prevent any other method using the Bunch pattern. So overwriting the <code>grade</code> method is still possible if another method uses the bunch pattern.</p>
<h2>Protected Python bunch class that throws errors</h2>
<p>You can write bunch classes to raise errors when a key is in <code>self.__dict__</code>. This makes overrides explicitly fail.</p>
<pre><code class="language-python">class NotMutableAttribute(Exception):
    pass


class ProtectedBunchWithException:
    """ 
    Protected Python bunch class that throws errors

    Use this when you want to inform the coder
    they are touching protected code
    """
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            if hasattr(self, k):
                msg = f'{k} is not mutable'
                raise NotMutableAttribute(msg)
            else:
                setattr(self, k, v)

bunch = ProtectedBunch(__str__=5)
print(bunch)                
</code></pre>
<p>Again, this doesn't block other methods using bunch-style dict updates from overriding methods and attributes.</p>
<h2>Avoiding bugs caused by Bunch classes and bunch-style update methods</h2>
<p>The best way to avoid the bugs generated by bunch classes or generic update methods that can overwrite critical methods and attributes is to simply avoid using them. If a project takes this route, I recommend putting it in the standards and conventions.</p>
<p>If you do go forward with bunch classes, don't use checks of <code>k not in self.__dict__</code> to block overriding existing methods. Methods and class attributes do not exist in the instance <code>__dict__</code>.</p>
<h2>Historical Note</h2>
<p>This is a modern update of a <a href="https://pydanny.blogspot.com/2011/11/loving-bunch-class.html">blog post</a> I wrote nearly ten years ago.</p>
]]></content>
        <author>
            <name>Daniel Roy Greenfeld</name>
            <email>daniel@feldroy.com</email>
            <uri>https://daniel.feldroy.com</uri>
        </author>
        <contributor>
            <name>Daniel Roy Greenfeld</name>
            <email>daniel@feldroy.com</email>
            <uri>https://daniel.feldroy.com</uri>
        </contributor>
    </entry>
</feed>